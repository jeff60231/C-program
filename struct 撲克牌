// ConsoleApplication1.cpp : 定義主控台應用程式的進入點。
//

#include "stdafx.h"


// Fig. 7.24: fig07_24.c
// Card shuffling and dealing.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SUITS 4
#define FACES 13
#define CARDS 52


struct card{
	const char *suit;
	const char *face;
};

typedef struct card Card;
// prototypes
void fillDeck(Card * const wDeck, const char * wFace[], const char * wSuit[] ); // shuffling modifies wDeck
void deal(Card * const wDeck, const char *wFace[],const char *wSuit[], unsigned int wFrequency[]); // dealing doesn't modify the arrays
void shuffle(Card * const wDeck);
void judgeDeckPairs(unsigned int wFrequency[], const char *wFace[]);
void judgeDeckThreeOrFour(unsigned int wFrequency[], const char *wFace[]);
void resetFrequency(unsigned int wFrequency[]);



int main(void)
{
	
	// initialize suit array                       
	const char *suit[SUITS] =
	{ "Hearts", "Diamonds", "Clubs", "Spades" };

	// initialize face array                   
	const char *face[FACES] =
	{ "Ace", "Deuce", "Three", "Four",
	"Five", "Six", "Seven", "Eight",
	"Nine", "Ten", "Jack", "Queen", "King" };

	// initialize deck array
	Card  deck[CARDS] ;

	unsigned int frequency[13] = { 0 };



	srand(time(NULL)); // seed random-number generator
	fillDeck(deck, face, suit);
	shuffle(deck); // shuffle the deck



	printf("The  hand of cards:\n");
	puts("");
	resetFrequency(frequency);
	deal(deck, face, suit, frequency); // deal the deck
	judgeDeckPairs(frequency, face);
	judgeDeckThreeOrFour(frequency, face);
	puts("");


} // end main

// shuffle cards in deck
void fillDeck(Card * const wDeck, const char * wFace[], const char * wSuit[] )
{
	
	size_t card; // counter

	// for each of the cards, choose slot of deck randomly
	for (card = 0; card < CARDS; ++card) {

		// choose new random location until unoccupied slot found
		wDeck[card].face = wFace[card % FACES];
		wDeck[card].suit = wSuit[card / FACES];


		// place card number in chosen slot of deck
		
	} // end for
} // end function shuffle

void shuffle( Card * const wDeck)
{
	size_t i;
	size_t j;
	Card temp;

	for(i = 0; i < CARDS; i++)
	{

		j = rand() % CARDS;
		temp = wDeck[i]; 
		wDeck[i] = wDeck[j];
		wDeck[j] = temp;


	}



}

// deal cards in deck
void deal(Card * const wDeck, const char *wFace[],
	const char *wSuit[], unsigned int wFrequency[])
{
	size_t i; // card counter
	size_t j;
	size_t k;
	size_t l;
	

	// deal each of the cards
	for (i = 0; i < 5; ++i) {
		
		
		printf("%5s of %5s%s", wDeck[i].face, wDeck[i].suit, (i + 1) % 1 ?"  " :"\n");
		for(k = 0; k < 13; k++){
		if(wDeck[i].face == wFace[k])
			wFrequency[k] ++;
		}
	}

}
void judgeDeckPairs(unsigned int wFrequency[], const char *wFace[])
{
	size_t times;
	
	unsigned int timesRecord = 0;
	unsigned int temp[2] = { 0 };
	unsigned int record = 0;
	for (times = 0; times < 13; times++)
	{
		if (wFrequency[times] == 2)
		{
			record++;
			temp[0] = times;
			timesRecord = times;
			break;
		}

	}
	for (times = timesRecord + 1; times < 13; times++)
	{

		if (wFrequency[times] == 2)
		{
			record++;
			temp[1] = times;
			timesRecord = times;
			break;
		}

	}
	if (record == 1)
	{
		printf("The hand contains a pair of %s", wFace[temp[0]]);
	}
	else if (record == 2)
	{
		printf("The hand contains two pairs of %s and %s", wFace[temp[0]], wFace[temp[1]]);
	}


}
void judgeDeckThreeOrFour(unsigned int wFrequency[], const char *wFace[])
{
	size_t times;
	for (times = 0; times < 13; times++)
	{
		if (wFrequency[times] == 3)
			printf("The hand contains three of %s.", wFace[times]);
		else if (wFrequency[times] == 4)
			printf("The hand contains four of %s.", wFace[times]);
	}


}

void resetFrequency(unsigned int wFrequency[])
{
	unsigned int i;

	for (i = 0; i < 13; i++)
	{
		wFrequency[i] = 0;
	}
}

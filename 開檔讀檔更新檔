#include <stdio.h>

          
struct person {
   unsigned int acctNum;
   char lastName[ 15 ];   
   char firstName[ 15 ]; 
   char age[ 4 ];            
};               


unsigned int enterChoice( void );
void textFile( FILE *readPtr );
void updateRecord( FILE *fPtr );
void newRecord( FILE *fPtr );
void deleteRecord( FILE *fPtr );

int main( void )
{ 
   FILE *cfPtr;
   unsigned int choice;

   if ( ( cfPtr = fopen( "nameage.dat", "rb+" ) ) == NULL ) {
      puts( "File could not be opened." );
   }
   else { 
      while ( ( choice = enterChoice() ) != 5 ) { 
         switch ( choice ) { 
            case 1:
               textFile( cfPtr );
               break;
            case 2:
               updateRecord( cfPtr );
               break;
            case 3:
               newRecord( cfPtr );
               break;
            case 4:
               deleteRecord( cfPtr );
               break;
            default:
               puts( "Incorrect choice" );
               break;
		 }
      }

      fclose( cfPtr );
   }
}

void textFile( FILE *readPtr )
{ 
   FILE *writePtr;
   int result;

   struct person PERSON = { 0, "unassigned", "", "0" };

   if ( ( writePtr = fopen( "accounts.txt", "w" ) ) == NULL ) {
      puts( "File could not be opened." );
   } 
   else { 
      rewind( readPtr );
      fprintf( writePtr, "%-6s%-16s%-11s%10s\n", 
         "Acct", "Last Name", "First Name","Age" );

      while ( !feof( readPtr ) ) { 
         result = fread(&PERSON, sizeof( struct person ), 1, readPtr);

         if ( result != 0 && PERSON.acctNum != 0 ) {
            fprintf( writePtr, "%-6d%-16s%-11s%10.2s\n",
               PERSON.acctNum, PERSON.lastName,         
               PERSON.firstName, PERSON.age );      
         } 
      }

      fclose( writePtr );
   }
} 

void updateRecord( FILE *fPtr )

{ 
   unsigned int account;

   struct person PERSON = { 0, "unassigned", "", "0" };

   printf( "%s", "Enter account to update ( 1 - 100 ): " );
   scanf( "%d", &account );
             
   fseek( fPtr, ( account - 1 ) * sizeof( struct person ), 
      SEEK_SET );                                              

   fread( &PERSON, sizeof( struct person ), 1, fPtr );

   if ( PERSON.acctNum == 0 ) {
      printf( "Account #%d has no information.\n", account );
   }
   else {
      printf( "%-6d%-16s%-11s%10.2s\n\n", 
         PERSON.acctNum, PERSON.lastName, 
         PERSON.firstName, PERSON.age );
	  
	  printf("Enter new age: ");
	  scanf("%s", PERSON.age);
      
      printf( "%-6d%-16s%-11s%10.2s\n", 
         PERSON.acctNum, PERSON.lastName, 
         PERSON.firstName, PERSON.age );
          
      fseek( fPtr, ( account - 1 ) * sizeof( struct person ), 
         SEEK_SET );                                              
   
      fwrite( &PERSON, sizeof( struct person ), 1, fPtr );
   }
}

void deleteRecord( FILE *fPtr )
{ 
   struct person PERSON;
   struct person blankClient = { 0, "unassigned", "", "0" };
   
   unsigned int accountNum;

   printf( "%s", "Enter account number to delete ( 1 - 100 ): " );
   scanf( "%d", &accountNum );
                
   fseek( fPtr, ( accountNum - 1 ) * sizeof( struct person ), 
      SEEK_SET );                                                 
                    
   fread( &PERSON, sizeof( struct person ), 1, fPtr );

   if ( PERSON.acctNum == 0 ) {
      printf( "Account %d does not exist.\n", accountNum );
   }
   else {         
      fseek( fPtr, ( accountNum - 1 ) * sizeof( struct person ), 
         SEEK_SET );                                                 

      fwrite( &blankClient,                          
         sizeof( struct person ), 1, fPtr );     
   }
}

void newRecord( FILE *fPtr )
{ 
   struct person PERSON = { 0, "unassigned", "", "0" };

   unsigned int accountNum;

   printf( "%s", "Enter new account number ( 1 - 100 ): " );
   scanf( "%d", &accountNum );
                
   fseek( fPtr, ( accountNum - 1 ) * sizeof( struct person ), 
      SEEK_SET );                                                 
                          
   fread( &PERSON, sizeof( struct person ), 1, fPtr );

   if ( PERSON.acctNum != 0 ) {
      printf( "Account #%d already contains information.\n",
         PERSON.acctNum );
   }
   else {
      printf( "%s", "Enter lastname, firstname, age\n? " );
      scanf( "%14s%9s%s", &PERSON.lastName, &PERSON.firstName, 
         &PERSON.age );

      PERSON.acctNum = accountNum;
 
      fseek( fPtr, ( PERSON.acctNum - 1 ) *            
         sizeof( struct person ), SEEK_SET );      
                  
      fwrite( &PERSON,                               
         sizeof( struct person ), 1, fPtr );     
   }
}

unsigned int enterChoice( void )
{ 
   unsigned int menuChoice;

   printf( "%s", "\nEnter your choice\n"
      "1 - store a formatted text file of accounts called\n"
      "    \"accounts.txt\" for printing\n"
      "2 - update an account\n"
      "3 - add a new account\n"
      "4 - delete an account\n"
      "5 - end program\n? " );

   scanf( "%u", &menuChoice ); 
   return menuChoice;
}
